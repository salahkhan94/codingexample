#include <iostream>
#include <Eigen/Dense>
#include <boost/thread.hpp>
#include <ros/ros.h>
#include <nodelet/nodelet.h>
#include <geometry_msgs/Pose2D.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Accel.h>
#include <cmath>

using namespace std;
namespace track_and_chase {

class ChasePlannerNode {
public:
    ChasePlannerNode(const ros::NodeHandle &node_handle,
                        const ros::NodeHandle &private_node_handle);
    ~ChasePlannerNode() {};
private:
    // ros node handle
    ros::NodeHandle nh_;
    // private ros node handle
    ros::NodeHandle pnh_;
    
    //ros communication
    ros::Subscriber sub_mpos_, sub_rpos_;
    ros::Publisher pub_rvel_cmd_;//Publisher for desired robot velocity command 

    geometry_msgs::Pose2D robot_pose_; //Robot Pose 
    geometry_msgs::Pose2D mouse_pose_; //Tracked Mouse Pose
    geometry_msgs::Twist robot_vel_cmd; // Velocity command generated by the position controller

    ros::Timer periodic_timer_; //To run the posController function periodically

    double pi = 3.1415926;

    //Angle between the robot's heading and the line connecting robot
    //to mouse position
    double err_a;

    //Linear error between the robot and the mouse 
    double err_l;

    //maintains a fixed tracking distance while chasing the mouse
    double tracking_dist_ = 70;
    
    //Variables limiting the velocity commands out of the controller
    double max_angular_vel_ = 50, max_linear_vel_ = 10000;

    //If err_a > e_angle_tolerance the robot does a pure rotation to
    //reduce the error
    double e_angle_tolerance = 45 / 57.2958;
    
    float loop_rate_ = 30; //loop Rate

    void onInit(); // initializes the subscribers and publishers
    void rposecb(const geometry_msgs::Pose2D &pose_msg); //Robot Pose Callback
    void mposecb(const geometry_msgs::Pose2D &pose_msg); //Mouse Pose Callback
    
    void cal_angle_err(); // Function for calculating the angular error err_a
    void cal_dist_err(); // Distance between the Robot and Mouse

    // PID controller which guides the Robot towards the Mouse, publishes velocities
    void posController(const ros::TimerEvent& event);  

};
}